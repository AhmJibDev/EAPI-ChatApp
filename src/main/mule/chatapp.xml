<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:os="http://www.mulesoft.org/schema/mule/os"
      xmlns:websocket="http://www.mulesoft.org/schema/mule/websocket"
      xmlns:java="http://www.mulesoft.org/schema/mule/java"
      xmlns:file="http://www.mulesoft.org/schema/mule/file"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:db="http://www.mulesoft.org/schema/mule/db"
      xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd 
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/websocket http://www.mulesoft.org/schema/mule/websocket/current/mule-websocket.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	
	<!-- Configuration Section -->
	<!-- This section includes the listener and database configurations -->
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config">
		<http:listener-connection host="0.0.0.0" port="8091" />
	</http:listener-config>
	
	<db:config name="Database_Config" doc:name="Database Config">
		<db:my-sql-connection host="${sql.Host}" port="${sql.Port}" user="${sql.User}" password="${sql.Password}" database="${sql.Database}" />
	</db:config>
	
	<websocket:config name="WebSockets_Config" doc:name="WebSockets Config" doc:id="3f39a4bb-3e7b-45ad-8b3c-b41ce064ae71" >
		<websocket:connection >
			<reconnection >
				<reconnect count="3"/>
			</reconnection>
			<websocket:server-settings listenerConfig="HTTP_Listener_config" idleSocketTimeout="10" idleSocketTimeoutUnit="HOURS" listenerBasePath="/ws"/>
		</websocket:connection>
	</websocket:config>
	
	<configuration-properties file="config.yaml" />

	<!-- Login Page Flow -->
	<!-- This flow is responsible for serving the login page -->

	<flow name="GetLoginPageFlow">
		<http:listener config-ref="HTTP_Listener_config" path="/login" allowedMethods="GET" />
	  	<set-payload value="#[{}]" doc:name="ClearPayload"/> <!-- Clear any existing payload -->
	    <parse-template location="html/login.html" doc:name="Login Page"/>
	    <error-handler>
	        <on-error-continue type="ANY" logException="true">
	            <set-payload value="#[&quot;error&quot;: &quot;Une erreur s'est produite lors du chargement de la page de connexion&quot;]" /> <!-- Handle page loading error -->
	        </on-error-continue>
	    </error-handler>
	</flow>

	<!-- Authentication Flow -->
	<!-- This flow handles user authentication and redirects to the chat page if successful -->
	<flow name="DoLoginFlow">
		<http:listener config-ref="HTTP_Listener_config" path="/login" allowedMethods="POST">
		    <!-- Response configuration for redirection -->
		    <http:response statusCode="#[vars.httpStatus default 200]"> 
		        <http:headers><![CDATA[
		            #[{
		                "Location": vars.RedirectURL,
		                "Set-Cookie": vars.usernameCookie,
            			"Set-Cookie": vars.userIdCookie,
            			"Set-Cookie": vars.sessionCookie
		            }]
		        ]]></http:headers>
		    </http:response>
		</http:listener>
		
		<logger level="INFO" message='#["User is trying to login"]' doc:name="User is trying to login"/>
		
		<!-- Query the database to check if the user exists with the given password -->
		<ee:transform doc:name="ApplySHA1ToPassword" doc:id="a732bc18-f2b1-42a5-8507-22a0a80968c8">
			<!-- Transform the password using SHA1 encryption -->
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import dw::Crypto
output application/json
---
{ 
	"username" : payload.username ,
	"sha1" : Crypto::SHA1(payload.password as Binary) 
}]]>
				</ee:set-payload>
			</ee:message>
		</ee:transform>
		<db:select config-ref="Database_Config" doc:name="Check User">
			<!-- SQL query to check the user -->
			<db:sql>
				<![CDATA[SELECT * FROM users WHERE username = :username AND password = :password]]>
			</db:sql>
			<db:input-parameters><![CDATA[#[{
	"username": payload.username,
	"password": payload.sha1
}]]]>
			</db:input-parameters>
		</db:select>
		<choice>
			<when expression="#[sizeOf(payload) &gt; 0]">
			    <!-- Success: Redirect to chat page -->
            	<!-- Set Cookies for username and userId -->
            	<set-variable value="#['username=' ++ payload[0].username]" variableName="usernameCookie" doc:name="Set Username Cookie"/>
				<set-variable value="#['userId=' ++ payload[0].id]" variableName="userIdCookie" doc:name="Set UserId Cookie"/>
				<set-variable value="#['sessionId=' ++ uuid()]" variableName="sessionCookie" doc:name="Set Secure Session Cookie"/>
				<set-variable value="302" doc:name="Set HTTP Status" variableName="httpStatus"/> <!-- HTTP Status for redirection -->
			    <set-variable value="http://localhost:8091/chat" doc:name="Set Redirect URL" variableName="RedirectURL"/>
				<parse-template doc:name="Home Page" location="html/index.html" />
			</when>

			<otherwise>
				<!-- If authentication fails, display an error message -->
				<ee:transform doc:name="CreateLoginErrorMessage">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
	"errorMessage": "Nom d'utilisateur ou mot de passe incorrect"
}]]>					</ee:set-payload>
					</ee:message>
				</ee:transform>
				<parse-template location="html/login.html" doc:name="Login Page"/>
			</otherwise>
		</choice>
		<error-handler>
			<on-error-continue type="ANY" logException="true">
				<!-- Handle any unexpected errors during the login attempt -->
				<set-payload value="#[&quot;error&quot;: &quot;Une erreur s'est produite lors de la tentative de connexion&quot;]" />
			</on-error-continue>
		</error-handler>
	</flow>
	
	<!-- Get Chat Page Flow -->
	<!-- This flow serves the chat page -->
	<flow name="GetChatPageFlow">
	    <http:listener config-ref="HTTP_Listener_config" path="/chat"/>
	    <logger level="INFO" doc:name="Logger" doc:id="466b6fac-2998-40d1-b76d-8d6ba8ca8a45" message="#[attributes.headers['cookie']]"/>
		<choice>
	        <when expression="#[attributes.headers['cookie'] contains 'sessionId']">
	            <parse-template location="html/index.html" />
	        </when>
	        <otherwise>
	            <set-variable variableName="httpStatus" value="401" />
	            <set-payload value="Unauthorized access" />
	        </otherwise>
	    </choice>
	</flow>

	<!-- User Chat Web Socket Flow -->
	<!-- Ce flux gère la réception des messages entrants via WebSockets et les diffuse à tous les clients connectés. -->
		<!-- Définition de la variable globale pour le suivi des clients connectés -->
	
	<!-- User Chat Web Socket Flow -->
	<flow name="UserChatWebSocketFlow" doc:id="a7915874-e8b6-4822-b71c-741c6be80dee">
		<websocket:inbound-listener doc:name="On New Inbound Message" doc:id="5ad99545-b9cc-4596-ac71-e2d4fb1cb776" config-ref="WebSockets_Config" path="/messages" outputMimeType="application/json">
			<reconnect />
			<websocket:default-groups >
				<websocket:default-group value="Antenne" />
			</websocket:default-groups>
		</websocket:inbound-listener>
	   <!-- Récupérer l'ID du socket et l'ID utilisateur -->
	    <set-variable variableName="socketId" value="#[attributes.socketId]" doc:name="Store socket ID"/>
	    <set-variable variableName="userId" value="#[attributes.queryParams.userId]" doc:name="Store userId"/>
	
	    <ee:transform doc:name="Chat Message">
	        <ee:message>
	            <ee:set-payload><![CDATA[%dw 2.0
	    output application/json
	    ---
	    {
	        message: payload.message,
	        socketId: vars.socketId, // inclure l'ID du socket
	        userId: vars.userId // inclure l'ID utilisateur
	    }]]>
	            </ee:set-payload>
	        </ee:message>
	    </ee:transform>

		<websocket:broadcast doc:name="Broadcast" doc:id="e4c4e034-d2d1-4574-9441-1529116508b9" config-ref="WebSockets_Config" path="/ws/messages" >
			<websocket:groups >
				<websocket:group value="Antenne" />
			</websocket:groups>
		</websocket:broadcast>
		<logger message="Message diffusé: #[payload.message]" />
	</flow>

	
	<!-- Static Resources Flow -->
	<!-- This flow handles the serving of static resources like images -->

	<flow name="GetStaticResource">
		<http:listener config-ref="HTTP_Listener_config" path="/html/images/*" />
		<logger level="INFO" />
		<http:load-static-resource resourceBasePath="${mule.home}/apps/${app.name}/html/images" defaultFile="logo.png" />
		<error-handler>
			<on-error-continue type="ANY" logException="true">
				<!-- Handle any errors while loading the static resource -->
				<set-payload value="#[&quot;error&quot;: &quot;Une erreur s'est produite lors du chargement de la ressource&quot;]" />
			</on-error-continue>
		</error-handler>
	</flow>
</mule>
